디자인 패턴 : Design(설계 방법) + Pattern(모범) => 소프트웨어 설계에서 공통적 문제에 대한 표준적 해법. 재 사용성을 지닌 객체지향 소프트웨어의 핵심요소

디자인 패턴을 사용하는 이유
- 현실적으로 모든 것들을 고려하여 설계하고 제작하는 것은 불가능하기 때문에 디자인 패턴을 참고하는 것도 좋다.
- 디자인 패턴을 참고하여 제작하면 타인에게도 쉽게 코드를 이해할 수 있게 할 수 있다.

UML 클래스 다이어그램
- 객체의 관계를 나타내는 표시방법
- 클래스나 프로그램을 설계할 때 사용
- 디자인 패턴을 설명하기 위해 필요함

싱글톤 패턴(Singleton) : 인스턴스가 1개만 생성되도록 하는 방법
- 객체가 한 개 이상 생성되지 않게 하는 패턴
- 게임에서 관리자 클래스에 사용된다.(ex : GameManager)
- 게임에서 주요한 객체(게임의 흐름 관리, 핵심 아이템등)이 다수 존재한다면 게임 설계에서 문제가 생기기 쉽다. 이때 명확하게 하나만 지정하여 선언하는 것으로 관리하게 한다.

싱글톤 패턴의 필수요소
- 객체가 한 개 이상 생성되지 않게 생성자를 은닉한다.
- 생성자를 은닉하면 포인터만 생성이 가능하다.
- 클래스 멤버 변수 / 함수에서 객체가 생성되기 전 접근하거나, 모든 객체에서 공유하기 위해서는 static 키워드가 필요하다.
- 정적 멤버 변수에 접근하려면 정적 멤버 함수가 필요하다.
- 정적 멤버 변수를 사용하려면, 전역변수로 선언을 해야 한다.